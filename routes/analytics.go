package routes

import (
	tg "TimeCounterBot/tg/bot"
	"encoding/json"
	"log"
	"os"
	"os/exec"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// ActivityNode ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–∑–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
type ActivityNode struct {
	ID       int      `json:"id"`
	Name     string   `json:"name"`
	ParentID *int     `json:"parent_id"`
	Duration *float64 `json:"duration"`
}

// ActivityData ‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–∫—Ä–∏–ø—Ç
type ActivityData struct {
	Nodes []ActivityNode `json:"nodes"`
}

// GetDayStatisticsCommand –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func GetDayStatisticsCommand(message *tgbotapi.Message) {
	// –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã
	data := ActivityData{
		Nodes: []ActivityNode{
			{ID: 1, Name: "Work", ParentID: nil, Duration: nil},
			{ID: 2, Name: "Sleep", ParentID: nil, Duration: FloatPtr(6)},
			{ID: 3, Name: "Leisure", ParentID: nil, Duration: nil},
			{ID: 4, Name: "Exercise", ParentID: nil, Duration: FloatPtr(2)},
			{ID: 5, Name: "Breakfast", ParentID: IntPtr(1), Duration: FloatPtr(2)},
			{ID: 6, Name: "Programming", ParentID: IntPtr(1), Duration: nil},
			{ID: 7, Name: "Golang", ParentID: IntPtr(6), Duration: FloatPtr(4)},
			{ID: 8, Name: "Python", ParentID: IntPtr(6), Duration: FloatPtr(2)},
			{ID: 9, Name: "Gaming", ParentID: IntPtr(3), Duration: FloatPtr(5)},
		},
	}

	// –ö–æ–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
	jsonData, err := json.Marshal(data)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: %v", err)
	}

	// –ü—É—Ç—å –∫ Python-—Å–∫—Ä–∏–ø—Ç—É –∏ —Ñ–∞–π–ª—É –≤—ã–≤–æ–¥–∞
	scriptPath := "python_scripts/generate_sunburst_chart.py"
	outputFile := "pie_chart.png"

	// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
	log.Printf("üìå –ó–∞–ø—É—Å–∫–∞–µ–º Python-—Å–∫—Ä–∏–ø—Ç: %s", scriptPath)
	log.Printf("üìå –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏: %s", string(jsonData))
	log.Printf("üìå –§–∞–π–ª –¥–ª—è –≤—ã–≤–æ–¥–∞: %s", outputFile)

	// –°–æ–∑–¥–∞—ë–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Python-—Å–∫—Ä–∏–ø—Ç–∞
	cmd := exec.Command("python3", scriptPath, string(jsonData), outputFile)

	// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º stderr, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
	cmd.Stderr = os.Stderr

	// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	err = cmd.Run()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª—Å—è –ª–∏ —Ñ–∞–π–ª
	if _, err := os.Stat(outputFile); os.IsNotExist(err) {
		log.Fatalf("‚ùå –§–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: %s", outputFile)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ Telegram
	msgconf := tgbotapi.NewPhoto(int64(message.Chat.ID), tgbotapi.FilePath(outputFile))
	_, err = tg.Bot.Send(msgconf)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: %v", err)
	}
}

// FloatPtr ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ float64
func FloatPtr(value float64) *float64 {
	return &value
}

// IntPtr ‚Äî –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –Ω–∞ int
func IntPtr(value int) *int {
	return &value
}
