package routes

import (
	"fmt"
	"log"
	"math"
	"sort"
	"time"

	"TimeCounterBot/common"
	"TimeCounterBot/db"
	"TimeCounterBot/tg/bot"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// AnalyticsMenuCommand –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
func AnalyticsMenuCommand(message *tgbotapi.Message) {
	tgUser := message.From
	if tgUser == nil {
		return
	}

	userID := common.UserID(tgUser.ID)

	user, err := db.GetUserByID(userID)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %v", err)
		return
	}

	msgText := "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", "analytics__day_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã", "analytics__compare_periods"),
		),
	)

	msgConf := tgbotapi.NewMessage(int64(user.ChatID), msgText)
	msgConf.ParseMode = "Markdown"
	msgConf.ReplyMarkup = keyboard

	_, err = bot.Bot.Send(msgConf)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}

	// –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
	_, err = bot.Bot.Request(
		tgbotapi.NewDeleteMessage(message.Chat.ID, message.MessageID),
	)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

// AnalyticsGetDayStatsCallback –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
func AnalyticsGetDayStatsCallback(callback *tgbotapi.CallbackQuery) {
	// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ GetDayStatisticsCommand
	message := &tgbotapi.Message{
		From: callback.From,
		Chat: callback.Message.Chat,
	}

	GetDayStatisticsCommand(message)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
	bot.Bot.Request(answerConfig)
}

// AnalyticsComperiodsCallback –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.
func AnalyticsComperiodsCallback(callback *tgbotapi.CallbackQuery) {
	msgText := "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è vs –ø—Ä–æ—à–ª–∞—è", "compare_periods__this_vs_last_week"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –≠—Ç–æ—Ç –º–µ—Å—è—Ü vs –ø—Ä–æ—à–ª—ã–π", "compare_periods__this_vs_last_month"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã", "compare_periods__custom"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "analytics__back"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
	bot.Bot.Request(answerConfig)
}

// AnalyticsBackCallback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.
func AnalyticsBackCallback(callback *tgbotapi.CallbackQuery) {
	msgText := "üìä *–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥", "analytics__day_stats"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìä –°—Ä–∞–≤–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã", "analytics__compare_periods"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
	bot.Bot.Request(answerConfig)
}

// ComparePeriods_ThisVsLastWeekCallback —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é.
func ComparePeriods_ThisVsLastWeekCallback(callback *tgbotapi.CallbackQuery) {
	userID := common.UserID(callback.From.ID)

	now := time.Now()

	// –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
	weekday := int(now.Weekday())
	if weekday == 0 { // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
		weekday = 7
	}
	thisWeekStart := now.AddDate(0, 0, -(weekday - 1)).Truncate(24 * time.Hour)
	thisWeekEnd := thisWeekStart.AddDate(0, 0, 6).Add(23*time.Hour + 59*time.Minute + 59*time.Second)

	// –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è
	lastWeekStart := thisWeekStart.AddDate(0, 0, -7)
	lastWeekEnd := thisWeekEnd.AddDate(0, 0, -7)

	comparison, err := db.CompareActivityPeriods(
		userID,
		thisWeekStart, thisWeekEnd,
		lastWeekStart, lastWeekEnd,
		"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è",
		"–ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è",
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err)
		answerConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		bot.Bot.Request(answerConfig)
		return
	}

	msgText := formatComparisonResult(comparison)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "compare_periods__back"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
	bot.Bot.Request(answerConfig)
}

// ComparePeriods_ThisVsLastMonthCallback —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∏ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü.
func ComparePeriods_ThisVsLastMonthCallback(callback *tgbotapi.CallbackQuery) {
	userID := common.UserID(callback.From.ID)

	now := time.Now()

	// –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
	thisMonthStart := time.Date(now.Year(), now.Month(), 1, 0, 0, 0, 0, now.Location())
	thisMonthEnd := thisMonthStart.AddDate(0, 1, 0).Add(-time.Second)

	// –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
	lastMonthStart := thisMonthStart.AddDate(0, -1, 0)
	lastMonthEnd := thisMonthStart.Add(-time.Second)

	comparison, err := db.CompareActivityPeriods(
		userID,
		thisMonthStart, thisMonthEnd,
		lastMonthStart, lastMonthEnd,
		"–≠—Ç–æ—Ç –º–µ—Å—è—Ü",
		"–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü",
	)

	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤: %v", err)
		answerConfig := tgbotapi.NewCallback(callback.ID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
		bot.Bot.Request(answerConfig)
		return
	}

	msgText := formatComparisonResult(comparison)

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "compare_periods__back"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
	bot.Bot.Request(answerConfig)
}

// ComparePeriods_CustomCallback –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–∏–æ–¥–æ–≤.
func ComparePeriods_CustomCallback(callback *tgbotapi.CallbackQuery) {
	msgText := "üîß *–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ*\n\n" +
		"–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n" +
		"–í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "compare_periods__back"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
	bot.Bot.Request(answerConfig)
}

// ComparePeriods_BackCallback –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –º–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤.
func ComparePeriods_BackCallback(callback *tgbotapi.CallbackQuery) {
	msgText := "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ä–∞–≤–Ω–∏—Ç—å:"

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÖ –≠—Ç–∞ –Ω–µ–¥–µ–ª—è vs –ø—Ä–æ—à–ª–∞—è", "compare_periods__this_vs_last_week"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üìÜ –≠—Ç–æ—Ç –º–µ—Å—è—Ü vs –ø—Ä–æ—à–ª—ã–π", "compare_periods__this_vs_last_month"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–∏–æ–¥—ã", "compare_periods__custom"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "analytics__back"),
		),
	)

	editConfig := tgbotapi.NewEditMessageTextAndMarkup(
		callback.Message.Chat.ID,
		callback.Message.MessageID,
		msgText,
		keyboard,
	)
	editConfig.ParseMode = "Markdown"
	bot.Bot.Send(editConfig)

	answerConfig := tgbotapi.NewCallback(callback.ID, "–ú–µ–Ω—é —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–µ—Ä–∏–æ–¥–æ–≤")
	bot.Bot.Request(answerConfig)
}

// formatComparisonResult —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç.
func formatComparisonResult(comparison *db.PeriodComparisonResult) string {
	if len(comparison.Comparisons) == 0 {
		return "üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–æ–≤*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–∏
	sort.Slice(comparison.Comparisons, func(i, j int) bool {
		return math.Abs(float64(comparison.Comparisons[i].DifferenceMin)) > math.Abs(float64(comparison.Comparisons[j].DifferenceMin))
	})

	result := fmt.Sprintf("üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: %s vs %s*\n\n",
		comparison.Period1Name, comparison.Period2Name)

	// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	totalDiff := comparison.Period1Total - comparison.Period2Total
	totalDiffHours := float64(totalDiff) / 60.0
	result += fmt.Sprintf("‚è± *–û–±—â–µ–µ –≤—Ä–µ–º—è:*\n")
	result += fmt.Sprintf("‚Ä¢ %s: %s\n", comparison.Period1Name, formatMinutes(comparison.Period1Total))
	result += fmt.Sprintf("‚Ä¢ %s: %s\n", comparison.Period2Name, formatMinutes(comparison.Period2Total))

	if totalDiff > 0 {
		result += fmt.Sprintf("üìà *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* +%.1f —á\n\n", totalDiffHours)
	} else if totalDiff < 0 {
		result += fmt.Sprintf("üìâ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* %.1f —á\n\n", totalDiffHours)
	} else {
		result += fmt.Sprintf("‚ûñ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ:* –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n\n")
	}

	// –¢–æ–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π)
	result += "*–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:*\n"

	count := 0
	for _, comp := range comparison.Comparisons {
		if count >= 5 {
			break
		}

		if comp.DifferenceMin == 0 {
			continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
		}

		icon := "üìà"
		sign := "+"
		if comp.DifferenceMin < 0 {
			icon = "üìâ"
			sign = ""
		} else if comp.Period2Minutes == 0 {
			icon = "üÜï"
		} else if comp.Period1Minutes == 0 {
			icon = "‚ùå"
		}

		diffHours := float64(comp.DifferenceMin) / 60.0
		percentStr := ""
		if comp.PercentChange != 0 {
			if comp.PercentChange == 100 {
				percentStr = " (–Ω–æ–≤–∞—è)"
			} else if comp.PercentChange == -100 {
				percentStr = " (–∏—Å—á–µ–∑–ª–∞)"
			} else {
				percentStr = fmt.Sprintf(" (%s%.0f%%)", sign, math.Abs(comp.PercentChange))
			}
		}

		result += fmt.Sprintf("%s *%s*: %s%.1f —á%s\n",
			icon, comp.ActivityName, sign, math.Abs(diffHours), percentStr)

		count++
	}

	if count == 0 {
		result += "–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."
	}

	return result
}

// formatMinutes —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–∏–Ω—É—Ç—ã –≤ —á–∞—Å—ã –∏ –º–∏–Ω—É—Ç—ã.
func formatMinutes(minutes int64) string {
	if minutes == 0 {
		return "0 –º–∏–Ω"
	}

	hours := minutes / 60
	mins := minutes % 60

	if hours == 0 {
		return fmt.Sprintf("%d –º–∏–Ω", mins)
	} else if mins == 0 {
		return fmt.Sprintf("%d —á", hours)
	} else {
		return fmt.Sprintf("%d —á %d –º–∏–Ω", hours, mins)
	}
}
